{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["uniq","require","PingPongSystem","props","state","yourWins","oppWins","yourLoses","oppLoses","yourPoints","oppPoints","yourNameCurrentInput","yourOppNameCurrentInput","registeredNames","startingServer","currentServer","winThreshold","servingSwitchWinThreshold","servingSwitchPointsThreshold","resetEntirePingPongState","bind","updateNameRegistrar","updateYourNameInputValue","updateOppNameInputValue","updateStartingServer","addYourPoint","addOpponentPoint","addYourWin","addOpponentWin","this","setState","evt","target","value","registeredNamesCopy","push","name","console","log","includes","undefined","className","styles","container","onChange","type","maxlength","for","id","inputValue","list","map","index","onClick","style","display","border","paddingLeft","paddingRight","oppNameCurrentInput","uniqueName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.316b61c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Home.module.css';\nvar uniq = require('lodash/uniq')\n\nclass PingPongSystem extends Component {\n  constructor(props) {\n    super(props)\n    //TODO: Track various parts of state for the ping-pong management system\n    this.state = {\n      yourWins:0,\n      oppWins:0,\n      yourLoses:0,\n      oppLoses:0,\n      yourPoints:0,\n      oppPoints:0,\n      yourNameCurrentInput:'',\n      yourOppNameCurrentInput:'',\n      //TODO: Mirror this to the localstorage api, filter out anything thats not already been stored then\n      //save it to the local storage system\n      registeredNames: [],\n      //Note false = opponent is serving, and true = you are serving in the point management system\n      startingServer:false,\n      currentServer:false,\n      winThreshold:10,\n      servingSwitchWinThreshold:2,\n      servingSwitchPointsThreshold:2\n    }\n\n    this.resetEntirePingPongState = this.resetEntirePingPongState.bind(this)\n    this.updateNameRegistrar = this.updateNameRegistrar.bind(this)\n    this.updateYourNameInputValue = this.updateYourNameInputValue.bind(this)\n    this.updateOppNameInputValue = this.updateOppNameInputValue.bind(this)\n    this.updateStartingServer = this.updateStartingServer.bind(this)\n    this.addYourPoint = this.addYourPoint.bind(this)\n    this.addOpponentPoint = this.addOpponentPoint.bind(this)\n    this.addYourWin = this.addYourWin.bind(this)\n    this.addOpponentWin = this.addOpponentWin.bind(this)\n  }\n\n    //Resets the entire application state for ping to reset the game\n    resetEntirePingPongState(){\n      this.setState({\n        yourWins:0,\n        oppWins:0,\n        yourLoses:0,\n        oppLoses:0,\n        yourPoints:0,\n        oppPoints:0,\n        yourNameCurrentInput:'',\n        yourOppNameCurrentInput:'',\n        registeredNames: [],\n        startingServer:false,\n        currentServer:false,\n        winThreshold:10,\n        servingSwitchWinThreshold:2,\n        servingSwitchPointsThreshold:2\n      })\n    }\n\n    updateYourNameInputValue(evt){\n      this.setState({\n        yourNameCurrentInput: evt.target.value\n      });\n    }\n\n    updateOppNameInputValue(evt){\n      this.setState({\n        yourOppNameCurrentInput: evt.target.value\n      });\n    }\n\n    updateStartingServer(){\n      this.setState({\n        startingServer: !this.state.startingServer\n      });\n    }\n\n    updateNameRegistrar(){\n      let registeredNamesCopy = this.state.registeredNames;\n      registeredNamesCopy.push(this.state.yourOppNameCurrentInput,this.state.yourNameCurrentInput);\n      registeredNamesCopy = uniq(registeredNamesCopy);\n      this.setState({\n        registeredNames: registeredNamesCopy\n      });    \n    }\n \naddYourPoint(name){\n  console.log(name)\n  if(this.state.registeredNames.includes(name) && this.state[name] == undefined) {\n    this.setState((state)=>{\n    return {\n      [name]: 0\n    }})\n  }\n\n  this.setState((state)=>{return{\n    yourPoints:this.state.yourPoints+1\n  }}, ()=>{\n\n    if(this.state.yourPoints>=10 && ((this.state.yourPoints-this.state.oppPoints)>=2)){\n      this.setState((state)=>{\n        return {\n        oppPoints:0,\n        yourPoints:0,\n        [name]:  this.state[name] + 1\n      }\n    }\n    )}\n    }\n  )}\n\naddOpponentPoint(name){\n  \n  if(this.state.registeredNames.includes(name) && this.state[name] == undefined) {\n    this.setState((state)=>{\n    return {\n      [name]: 0\n    }})\n  }\n  this.setState((state)=>{return{\n    oppPoints:this.state.oppPoints+1\n  }}, ()=>{\n\n    if(this.state.oppPoints>=10 && ((this.state.oppPoints-this.state.yourPoints)>=2)){  \n      this.setState((state)=>{\n        return{\n        oppPoints:0,\n        yourPoints:0,\n        [name]:  this.state[name] + 1\n      }\n      })\n    }\n  })\n}\n    \n\naddYourWin(){\n  this.setState({\n    yourWins:this.state.yourWins+1\n  })\n}\naddOpponentWin(){\n  this.setState({\n    oppWins:this.state.oppWins+1\n  })\n} \n  \n    render(){\n      //TODO: Enable input system that will enter into state the various pieces of state that need to\n      // be tracked in the ping-pong application system\n      return (\n        <div className={styles.container}>\n          <h1>Ping Pong Game Registration Input System:</h1>\n          <div>\n            <span>Your Name:</span> <input value={this.state.yourNameCurrentInput} onChange={evt => this.updateYourNameInputValue(evt)}  type='text' maxlength={25}/>\n          </div>\n          <div>\n            <span>Opponent's Name:</span> <input value={this.state.yourOppNameCurrentInput} onChange={evt => this.updateOppNameInputValue(evt)}  type='text' maxlength={25}/>\n          </div>\n          <div>\n            <label for=\"prevNamesYou\">You Select from previous names:</label>\n          <input id=\"prevNamesYou\" value={this.state.inputValue} onChange={evt => this.updateYourNameInputValue(evt)} type='search' list=\"prevNamesList\" />\n            </div>\n          <div>\n\n          <div>\n            <label for=\"prevNamesOpp\">Opponent Select from previous names:</label>\n          <input id=\"prevNamesOpp\" value={this.state.inputValue} onChange={evt => this.updateOppNameInputValue(evt)} type='search' list=\"prevNamesList\" />\n              {/* Use map function on state array to display previously registered names: */}\n              <datalist id=\"prevNamesList\">\n                  {this.state.registeredNames.map((name,index)=>{\n                    return <option value={name}/>\n                  })}\n              </datalist>\n            </div>\n\n\n            <button onClick={this.updateStartingServer}>Swap Server</button>\n            <span>Starting Server: {this.state.startingServer ? 'Opponent - ' + this.state.yourOppNameCurrentInput: 'You - ' + this.state.yourNameCurrentInput}</span>\n\n          \n          </div>\n         <div style={{display:'flex'}}>\n          <div style={{border:5 + 'px' + ' solid black', paddingLeft:10+'px',paddingRight:10+'px'}}> \n            <h1> Game Simulation:</h1>\n            <p>Current Server:{this.state.startingServer ? ' Opponent: ' + this.state.oppNameCurrentInput: ' You: ' + this.state.yourNameCurrentInput}</p>\n            <p>Your Points: {this.state.yourPoints}</p>\n            <p>Opponent Points: {this.state.oppPoints}</p>\n          </div>\n          <div style={{border:5 + 'px' + ' solid black', paddingLeft:10+'px',paddingRight:10+'px'}}>\n            <h1>Leaderboard Display:</h1>\n              {this.state.registeredNames.map((uniqueName,index)=>{\n                return <p>{uniqueName}'s Win Count: {this.state[uniqueName]}</p>\n              })}\n          </div>\n        </div>\n          <button onClick={this.updateNameRegistrar}>updateNameRegistrar</button>\n          <button onClick={this.resetEntirePingPongState}>RESET APPLICATION STATE</button>\n          <button onClick={() => this.addYourPoint(this.state.yourNameCurrentInput)}>Add Your Point</button>\n          <button onClick={() => this.addOpponentPoint(this.state.yourOppNameCurrentInput)}>Add Opponent Point</button>\n          {/* <button onClick={this.addYourWin}>Add Your Win</button>\n          <button onClick={this.addOpponentWin}>Add Opponent Win</button> */}\n        {/* <h2>HERE FOR DEBUGGING PURPOSES:</h2>\n        <p>{this.state.yourWins} yourWins</p>\n        <p>{this.state.oppWins} oppWins</p>\n        <p>{this.state.yourLoses} yourLoses</p>\n        <p>{this.state.yourPoints} yourPoints</p>\n        <p>{this.state.oppPoints} oppPoints</p>\n        <p>{this.state.yourNameCurrentInput}yourNameCurrentInput</p>\n        <p>{this.state.oppNameCurrentInput}oppNameCurrentInput</p>\n        <p>{this.state.registeredNames}registeredNames</p>\n        <p>{this.state.startingServer}startingServer</p>\n        <p>{this.state.winThreshold} winThreshold</p>\n        <p>{this.state.servingSwitchPointsThreshold}servingSwitchPointsThreshold</p>\n        <p>{this.state.servingSwitchWinThreshold}servingSwitchWinThreshold</p> */}\n        </div>\n      )\n    }\n  }\n  export default PingPongSystem;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}